Template namespacing

Now we might be able to get away with putting our templates directly 
in polls/templates (rather than creating another polls subdirectory), 
but it would actually be a bad idea. Django will choose the first 
template it finds whose name matches, and if you had a template with 
the same name in a different application, Django would be unable to 
distinguish between them. We need to be able to point Django at the 
right one, and the best way to ensure this is by namespacing them. 
That is, by putting those templates inside another directory named 
for the application itself.

Note

To make the tutorial shorter, all template examples use incomplete 
HTML. In your own projects you should use complete HTML documents.
https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Getting_started#Anatomy_of_an_HTML_document

The template system uses dot-lookup syntax to access variable 
attributes. In the example of {{ question.question_text }}, first 
Django does a dictionary lookup on the object question. Failing that, 
it tries an attribute lookup – which works, in this case. If attribute
lookup had failed, it would’ve tried a list-index lookup.

Method-calling happens in the {% for %} loop: question.choice_set.all 
is interpreted as the Python code question.choice_set.all(), which 
returns an iterable of Choice objects and is suitable for use in the 
{% for %} tag.

See the template guide for more about templates.
https://docs.djangoproject.com/en/3.0/topics/templates/